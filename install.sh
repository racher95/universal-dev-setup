#!/bin/bash

# üåç Universal Development Setup
# Configuraci√≥n autom√°tica y universal para entornos de desarrollo
# Compatible con: macOS, Linux, WSL, Windows
# Versi√≥n: 3.0 - Detecci√≥n inteligente multi-plataforma

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuraci√≥n de logging
TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
LOG_DIR="logs"
LOG_FILE="$LOG_DIR/installation-$TIMESTAMP.log"
ERROR_LOG="$LOG_DIR/errors-$TIMESTAMP.log"

# Crear directorio de logs si no existe
mkdir -p "$LOG_DIR"

# Funciones de logging
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

log_error() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [ERROR] $message" >> "$ERROR_LOG"
    echo "[$timestamp] [ERROR] $message" >> "$LOG_FILE"
}

log_success() {
    log_message "SUCCESS" "$1"
}

log_info() {
    log_message "INFO" "$1"
}

log_warning() {
    log_message "WARNING" "$1"
}

# Funci√≥n de compatibilidad para head -n -1 (eliminar √∫ltima l√≠nea)
remove_last_line() {
    local file="$1"
    local temp_file="$2"

    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS: usar sed
        sed '$d' "$file" > "$temp_file"
    else
        # Linux: usar head
        head -n -1 "$file" > "$temp_file"
    fi
}

# Inicializar logging
initialize_logging() {
    local start_time=$(date)
    echo "=== UNIVERSAL DEVELOPMENT SETUP - LOG DE INSTALACI√ìN ===" > "$LOG_FILE"
    echo "Fecha de inicio: $start_time" >> "$LOG_FILE"
    echo "Sistema operativo: $(uname -a)" >> "$LOG_FILE"
    echo "Usuario: $(whoami)" >> "$LOG_FILE"
    echo "Directorio de trabajo: $(pwd)" >> "$LOG_FILE"
    echo "Versi√≥n del script: 3.0" >> "$LOG_FILE"
    echo "====================================================" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"

    # Log de errores separado
    echo "=== LOG DE ERRORES - UNIVERSAL DEVELOPMENT SETUP ===" > "$ERROR_LOG"
    echo "Fecha de inicio: $start_time" >> "$ERROR_LOG"
    echo "====================================================" >> "$ERROR_LOG"
    echo "" >> "$ERROR_LOG"

    # Guardar tiempo de inicio para calcular duraci√≥n
    export start_time
}

# Funciones de utilidad mejoradas con logging
show_header() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë            üåç UNIVERSAL DEVELOPMENT SETUP 3.0               ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë     Configuraci√≥n autom√°tica para entornos de desarrollo    ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

show_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log_success "$1"
}
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log_warning "$1"
}
show_error() {
    echo -e "${RED}‚ùå $1${NC}"
    log_error "$1"
}
show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log_info "$1"
}
show_step() {
    echo -e "${PURPLE}üîß $1${NC}"
    log_info "STEP: $1"
}

# Funci√≥n para detectar el sistema operativo
detect_system() {
    OS_TYPE="$(uname -s)"

    case "$OS_TYPE" in
        "Darwin")
            SYSTEM="macOS"
            SYSTEM_NAME="macOS (nativo)"
            SYSTEM_ICON="üçé"
            ;;
        "Linux")
            if detect_wsl; then
                SYSTEM="WSL"
                DISTRO_NAME="${WSL_DISTRO_NAME:-WSL}"
                SYSTEM_NAME="Linux WSL ($DISTRO_NAME)"
                SYSTEM_ICON="üêß"
            else
                SYSTEM="Linux"
                SYSTEM_NAME="Linux (nativo)"
                SYSTEM_ICON="üêß"
            fi
            ;;
        "CYGWIN"*|"MINGW"*|"MSYS"*)
            SYSTEM="Windows"
            SYSTEM_NAME="Windows (nativo)"
            SYSTEM_ICON="ü™ü"
            ;;
        *)
            show_error "Sistema operativo no soportado: $OS_TYPE"
            echo "Sistemas soportados: macOS, Linux, WSL, Windows"
            exit 1
            ;;
    esac

    echo -e "${SYSTEM_ICON} Sistema detectado: ${CYAN}$SYSTEM_NAME${NC}"
}

# Funci√≥n para detectar WSL con m√∫ltiples m√©todos
detect_wsl() {
    # M√©todo 1: Variable de entorno WSL_DISTRO_NAME
    if [[ -n "${WSL_DISTRO_NAME}" ]]; then
        return 0
    fi

    # M√©todo 2: Variable WSLENV existe
    if [[ -n "${WSLENV}" ]]; then
        return 0
    fi

    # M√©todo 3: /proc/version contiene "microsoft" o "WSL"
    if [[ -f "/proc/version" ]] && grep -qi "microsoft\|wsl" /proc/version; then
        return 0
    fi

    # M√©todo 4: /proc/sys/kernel/osrelease contiene "microsoft" o "WSL"
    if [[ -f "/proc/sys/kernel/osrelease" ]] && grep -qi "microsoft\|wsl" /proc/sys/kernel/osrelease; then
        return 0
    fi

    # M√©todo 5: Directorio /mnt/c existe (t√≠pico en WSL)
    if [[ -d "/mnt/c" ]]; then
        return 0
    fi

    return 1
}

# Funci√≥n para configurar rutas seg√∫n el sistema
setup_paths() {
    case "$SYSTEM" in
        "macOS")
            VSCODE_SETTINGS_DIR="$HOME/Library/Application Support/Code/User"
            FONT_DIR="$HOME/Library/Fonts"
            PACKAGE_MANAGER="brew"
            ;;
        "WSL")
            # Detectar usuario de Windows
            if command -v cmd.exe &> /dev/null; then
                WINDOWS_USER=$(cmd.exe /C "echo %USERNAME%" 2>/dev/null | tr -d '\r\n')
                VSCODE_SETTINGS_DIR="/mnt/c/Users/${WINDOWS_USER}/AppData/Roaming/Code/User"
            else
                show_warning "No se puede detectar usuario de Windows"
                VSCODE_SETTINGS_DIR="$HOME/.vscode-server/data/User"
            fi
            FONT_DIR="/usr/local/share/fonts"
            PACKAGE_MANAGER="apt"
            ;;
        "Linux")
            VSCODE_SETTINGS_DIR="$HOME/.config/Code/User"
            FONT_DIR="/usr/local/share/fonts"
            PACKAGE_MANAGER="apt"
            ;;
        "Windows")
            # Para Windows nativo (Git Bash, MSYS2, etc.)
            VSCODE_SETTINGS_DIR="$APPDATA/Code/User"
            FONT_DIR="/c/Windows/Fonts"
            PACKAGE_MANAGER="choco"  # Assumimos Chocolatey
            ;;
    esac

    show_info "Configuraci√≥n para: $SYSTEM_NAME"
    show_info "VS Code Settings: $VSCODE_SETTINGS_DIR"
    show_info "Directorio de fuentes: $FONT_DIR"
    show_info "Gestor de paquetes: $PACKAGE_MANAGER"
}

# Funci√≥n para verificar requisitos previos
check_prerequisites() {
    show_step "Verificando requisitos previos..."

    case "$SYSTEM" in
        "macOS")
            if ! command -v brew &> /dev/null; then
                show_warning "Homebrew no est√° instalado"
                show_info "Se instalar√° autom√°ticamente durante la configuraci√≥n"
            fi
            ;;
        "WSL"|"Linux")
            if ! command -v apt &> /dev/null; then
                show_error "APT no est√° disponible"
                exit 1
            fi
            ;;
        "Windows")
            if ! command -v choco &> /dev/null; then
                show_warning "Chocolatey no est√° instalado"
                show_info "Inst√°lalo desde: https://chocolatey.org/"
                show_info "O usa el gestor de paquetes de Windows"
            fi
            ;;
    esac

    # Verificar VS Code
    if ! command -v code &> /dev/null; then
        show_warning "VS Code no est√° en PATH"
        case "$SYSTEM" in
            "macOS"|"Linux")
                show_info "Inst√°lalo desde: https://code.visualstudio.com/"
                ;;
            "WSL")
                show_info "Instala VS Code en Windows y aseg√∫rate de que est√© en PATH"
                ;;
            "Windows")
                show_info "Instala VS Code y aseg√∫rate de agregarlo al PATH"
                ;;
        esac
    else
        show_status "VS Code encontrado"
    fi

    # Verificar Node.js
    if command -v node &> /dev/null; then
        show_status "Node.js $(node --version) encontrado"
    else
        show_warning "Node.js no est√° instalado"
        show_info "Se instalar√° durante la configuraci√≥n"
    fi
}

# Funci√≥n para mostrar informaci√≥n del sistema
show_system_info() {
    echo ""
    echo -e "${CYAN}üìã INFORMACI√ìN DEL SISTEMA:${NC}"
    echo -e "   Sistema: $SYSTEM_NAME"
    echo -e "   Arquitectura: $(uname -m)"
    echo -e "   Kernel: $(uname -r)"

    if [[ "$SYSTEM" == "WSL" ]]; then
        echo -e "   Distribuci√≥n WSL: ${WSL_DISTRO_NAME:-N/A}"
        # Usar comando alternativo para evitar caracteres corruptos
        WSL_VERSION=$(wsl.exe --version 2>/dev/null | grep -E "Versi√≥n|Version" | head -1 | tr -cd '[:print:]' || echo 'N/A')
        echo -e "   Versi√≥n WSL: ${WSL_VERSION:-N/A}"
    fi

    if [[ "$SYSTEM" == "Linux" ]]; then
        if command -v lsb_release &> /dev/null; then
            echo -e "   Distribuci√≥n: $(lsb_release -d | cut -f2)"
        elif [[ -f "/etc/os-release" ]]; then
            echo -e "   Distribuci√≥n: $(grep PRETTY_NAME /etc/os-release | cut -d'=' -f2 | tr -d '\"')"
        fi
    fi

    # Mostrar informaci√≥n espec√≠fica de Windows
    if [[ "$SYSTEM" == "Windows" ]]; then
        show_windows_info
    fi

    echo ""
}

# Funci√≥n para mostrar informaci√≥n del sistema Windows
show_windows_info() {
    echo -e "\n${BLUE}=== INFORMACI√ìN DEL SISTEMA WINDOWS ===${NC}"

    # Verificar tipo de entorno Windows
    if [[ -n "$WSLENV" ]]; then
        echo -e "üîπ Entorno: ${YELLOW}WSL (Windows Subsystem for Linux)${NC}"
        echo -e "üîπ Distribuci√≥n: ${WSL_DISTRO_NAME:-Ubuntu}"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
        echo -e "üîπ Entorno: ${YELLOW}Cygwin${NC}"
    elif [[ "$OSTYPE" == "msys" ]]; then
        echo -e "üîπ Entorno: ${YELLOW}MSYS2/MinGW${NC}"
    else
        echo -e "üîπ Entorno: ${YELLOW}Windows Nativo${NC}"
    fi

    # Verificar PowerShell
    if command -v powershell &> /dev/null; then
        local ps_version=$(powershell -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null)
        echo -e "üîπ PowerShell: ${GREEN}Disponible v$ps_version${NC}"
    elif command -v pwsh &> /dev/null; then
        local ps_version=$(pwsh -Command '$PSVersionTable.PSVersion.Major' 2>/dev/null)
        echo -e "üîπ PowerShell Core: ${GREEN}Disponible v$ps_version${NC}"
    else
        echo -e "üîπ PowerShell: ${RED}No disponible${NC}"
    fi

    # Verificar gestores de paquetes
    if command -v choco &> /dev/null; then
        local choco_version=$(choco --version 2>/dev/null | head -n1)
        echo -e "üîπ Chocolatey: ${GREEN}Instalado ($choco_version)${NC}"
    else
        echo -e "üîπ Chocolatey: ${YELLOW}No instalado (se instalar√° autom√°ticamente)${NC}"
    fi

    if command -v winget &> /dev/null; then
        local winget_version=$(winget --version 2>/dev/null)
        echo -e "üîπ winget: ${GREEN}Disponible ($winget_version)${NC}"
    else
        echo -e "üîπ winget: ${YELLOW}No disponible${NC}"
    fi

    # Verificar permisos de administrador
    if check_admin_windows; then
        echo -e "üîπ Permisos: ${GREEN}Administrador${NC}"
    else
        echo -e "üîπ Permisos: ${YELLOW}Usuario est√°ndar${NC}"
        echo -e "  ${YELLOW}Nota: Algunos componentes requieren permisos de administrador${NC}"
    fi

    echo ""
}

# Verificar permisos de administrador en Windows
check_admin_windows() {
    # Intentar escribir en directorio del sistema
    local test_file="/c/Windows/Temp/admin_test_$$"
    if touch "$test_file" 2>/dev/null; then
        rm -f "$test_file" 2>/dev/null
        return 0
    fi
    return 1
}

# Funci√≥n para finalizar el logging con estad√≠sticas de tiempo y estado
finalize_logging() {
    local end_time=$(date)
    local start_timestamp
    local current_timestamp=$(date +%s)

    # Compatibilidad macOS vs Linux para conversi√≥n de fecha
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS usa date -jf
        start_timestamp=$(date -jf "%a %b %d %H:%M:%S %Z %Y" "$start_time" +%s 2>/dev/null || echo 0)
    else
        # Linux usa date -d
        start_timestamp=$(date -d "$start_time" +%s 2>/dev/null || echo 0)
    fi

    local duration=$((current_timestamp - start_timestamp))

    echo "" >> "$LOG_FILE"
    echo "====================================================" >> "$LOG_FILE"
    echo "Instalaci√≥n finalizada: $end_time" >> "$LOG_FILE"
    if [[ $duration -gt 0 ]]; then
        echo "Duraci√≥n total: ${duration}s" >> "$LOG_FILE"
    fi
    echo "Estado final: COMPLETADO" >> "$LOG_FILE"
    echo "====================================================" >> "$LOG_FILE"

    # Resumen en log de errores si hay errores
    if [[ -s "$ERROR_LOG" ]]; then
        echo "" >> "$ERROR_LOG"
        echo "====================================================" >> "$ERROR_LOG"
        echo "Instalaci√≥n completada con errores: $end_time" >> "$ERROR_LOG"
        echo "====================================================" >> "$ERROR_LOG"
    fi
}

# Funci√≥n para configurar terminal
configure_terminal() {
    show_step "Configurando terminal (Zsh + Oh My Zsh + Powerlevel10k)..."

    local terminal_script="$(dirname "$0")/scripts/terminal-setup.sh"

    if [[ -f "$terminal_script" ]]; then
        echo -e "${BLUE}‚ÑπÔ∏è  Ejecutando configuraci√≥n completa del terminal...${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Esto configurar√° Zsh, Oh My Zsh y Powerlevel10k${NC}"
        echo ""

        # Ejecutar script de terminal
        if bash "$terminal_script"; then
            show_status "Terminal configurado exitosamente"
            echo -e "${GREEN}‚úÖ Zsh + Oh My Zsh + Powerlevel10k instalado${NC}"
            echo -e "${BLUE}‚ÑπÔ∏è  Reinicia tu terminal para aplicar los cambios${NC}"
        else
            show_error "Error al configurar terminal"
            return 1
        fi
    else
        show_error "Script de terminal no encontrado: $terminal_script"
        return 1
    fi
}

# Funci√≥n principal
main() {
    # Inicializar logging
    initialize_logging

    # Verificar si se pasa el argumento --auto para instalaci√≥n autom√°tica
    if [[ "$1" == "--auto" ]] || [[ "$AUTO_INSTALL" == "true" ]]; then
        show_header
        detect_system
        setup_paths
        check_prerequisites
        show_system_info

        # Cargar m√≥dulos espec√≠ficos
        source "$(dirname "$0")/scripts/dependencies.sh"
        source "$(dirname "$0")/scripts/fonts.sh"
        source "$(dirname "$0")/scripts/vscode.sh"
        source "$(dirname "$0")/scripts/npm-tools.sh"
        source "$(dirname "$0")/scripts/git-config.sh"

        # Ejecutar instalaci√≥n completa autom√°ticamente
        echo -e "${CYAN}üöÄ INICIANDO INSTALACI√ìN AUTOM√ÅTICA COMPLETA...${NC}"
        echo ""
        full_installation

        echo ""
        echo -e "${GREEN}üéâ ¬°Instalaci√≥n autom√°tica completada!${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è  Para m√°s opciones, ejecuta: ./install.sh${NC}"
        return 0
    fi

    # Modo interactivo normal
    show_header
    detect_system
    setup_paths
    check_prerequisites
    show_system_info

    # Cargar m√≥dulos espec√≠ficos
    source "$(dirname "$0")/scripts/dependencies.sh"
    source "$(dirname "$0")/scripts/fonts.sh"
    source "$(dirname "$0")/scripts/vscode.sh"
    source "$(dirname "$0")/scripts/npm-tools.sh"
    source "$(dirname "$0")/scripts/git-config.sh"

    # Mostrar men√∫
    while true; do
        show_menu
        read -p "Selecciona una opci√≥n (1-11): " choice

        case $choice in
            1) check_status ;;
            2) full_installation ;;
            3) install_base_dependencies ;;
            4) install_fonts ;;
            5) configure_terminal ;;
            6) install_vscode_extensions ;;
            7) configure_vscode_settings ;;
            8) install_npm_tools ;;
            9) configure_git ;;
            10) show_help ;;
            11)
                echo -e "${CYAN}üëã ¬°Gracias por usar Universal Development Setup!${NC}"
                exit 0
                ;;
            *)
                show_error "Opci√≥n inv√°lida. Selecciona 1-11."
                ;;
        esac

        echo ""
        read -p "Presiona Enter para continuar..."
    done
}

# Funci√≥n para mostrar el men√∫
show_menu() {
    echo -e "${CYAN}üéØ MEN√ö PRINCIPAL:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "1. üîç Verificar estado actual"
    echo "2. üöÄ Instalaci√≥n completa"
    echo "3. üì¶ Solo dependencias base"
    echo "4. üî§ Solo fuentes de desarrollo"
    echo "5. üñ•Ô∏è  Solo configuraci√≥n de terminal"
    echo "6. üîå Solo extensiones VS Code"
    echo "7. ‚öôÔ∏è  Solo configuraci√≥n VS Code"
    echo "8. üõ†Ô∏è  Solo herramientas npm"
    echo "9. üîß Configurar Git (usuario/email)"
    echo "10. üìö Ayuda y documentaci√≥n"
    echo "11. ‚ùå Salir"

    # Mostrar advertencias espec√≠ficas para Windows
    if [[ "$SYSTEM" == "Windows" ]]; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  NOTA PARA WINDOWS:${NC}"
        if ! check_admin_windows; then
            echo -e "   ${YELLOW}‚Ä¢ Ejecuta como administrador para instalaci√≥n completa${NC}"
            echo -e "   ${YELLOW}‚Ä¢ Algunas funciones requieren permisos elevados${NC}"
        fi
        if ! command -v choco &> /dev/null && ! command -v winget &> /dev/null; then
            echo -e "   ${YELLOW}‚Ä¢ Chocolatey se instalar√° autom√°ticamente si es necesario${NC}"
        fi
        echo -e "   ${BLUE}‚Ä¢ PowerShell es requerido para instalaci√≥n completa${NC}"
    fi
    echo ""
}

# Funci√≥n para preguntar sobre configuraci√≥n de terminal
ask_terminal_configuration() {
    echo ""
    echo -e "${CYAN}üñ•Ô∏è  CONFIGURACI√ìN DE TERMINAL${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo -e "${BLUE}¬øDeseas configurar el terminal con Zsh + Oh My Zsh + Powerlevel10k?${NC}"
    echo ""
    echo -e "${YELLOW}Esto incluye:${NC}"
    echo "‚Ä¢ Zsh como shell por defecto"
    echo "‚Ä¢ Oh My Zsh con plugins esenciales"
    echo "‚Ä¢ Tema Powerlevel10k personalizado"
    echo "‚Ä¢ Fuentes Nerd Font para iconos"
    echo ""

    while true; do
        read -p "¬øConfigurar terminal? (s/n): " terminal_choice
        case $terminal_choice in
            [Ss]|[Yy]|[Ss][Ii]|[Yy][Ee][Ss])
                echo ""
                echo -e "${CYAN}üöÄ Iniciando configuraci√≥n del terminal...${NC}"
                echo ""
                # Ejecutar directamente el script de terminal
                if bash "$(dirname "$0")/scripts/terminal-setup.sh"; then
                    echo ""
                    echo -e "${GREEN}‚úÖ ¬°Terminal configurado exitosamente!${NC}"
                    echo -e "${BLUE}‚ÑπÔ∏è  Reinicia tu terminal para aplicar todos los cambios${NC}"
                else
                    echo ""
                    echo -e "${YELLOW}‚ö†Ô∏è  Hubo algunos problemas con la configuraci√≥n del terminal${NC}"
                    echo -e "${BLUE}‚ÑπÔ∏è  Puedes ejecutar manualmente: ./scripts/terminal-setup.sh${NC}"
                fi
                break
                ;;
            [Nn]|[Nn][Oo])
                echo ""
                echo -e "${BLUE}‚ÑπÔ∏è  Configuraci√≥n de terminal omitida${NC}"
                echo -e "${CYAN}üí° Puedes configurarlo m√°s tarde ejecutando: ./install.sh (opci√≥n 5)${NC}"
                break
                ;;
            *)
                echo -e "${RED}‚ùå Respuesta inv√°lida. Por favor responde 's' o 'n'${NC}"
                ;;
        esac
    done
}

# Funci√≥n para instalaci√≥n completa
full_installation() {
    show_step "Iniciando instalaci√≥n completa..."

    install_base_dependencies
    install_fonts
    install_vscode_extensions
    configure_vscode_settings
    install_npm_tools

    show_status "¬°Instalaci√≥n completa terminada!"
    echo ""
    echo -e "${GREEN}üéâ ¬°Tu entorno de desarrollo est√° listo!${NC}"

    # Finalizar logging
    finalize_logging

    # Mostrar informaci√≥n espec√≠fica de VS Code
    show_vscode_post_install_info

    echo -e "${BLUE}‚ÑπÔ∏è  Reinicia VS Code para aplicar todas las configuraciones${NC}"
    echo -e "${CYAN}üìã Los logs se guardaron en: $LOG_FILE${NC}"
    if [[ -s "$ERROR_LOG" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Errores encontrados guardados en: $ERROR_LOG${NC}"
    fi

    # Preguntar sobre configuraci√≥n del terminal
    ask_terminal_configuration
}

# Funci√≥n para verificar estado
check_status() {
    show_step "Verificando estado actual del sistema..."

    echo ""
    echo -e "${CYAN}üìä ESTADO ACTUAL:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    # Verificar VS Code
    if command -v code &> /dev/null; then
        show_status "VS Code encontrado"
        if [[ -f "$VSCODE_SETTINGS_DIR/settings.json" ]]; then
            show_status "Configuraci√≥n VS Code existe"
        else
            show_warning "Configuraci√≥n VS Code no encontrada"
        fi

        ext_count=$(code --list-extensions 2>/dev/null | wc -l)
        echo -e "   üîå Extensiones instaladas: $ext_count"
    else
        show_warning "VS Code no encontrado"
    fi

    # Verificar Node.js
    if command -v node &> /dev/null; then
        show_status "Node.js $(node --version)"
        if command -v npm &> /dev/null; then
            show_status "npm $(npm --version)"
        fi
    else
        show_warning "Node.js no instalado"
    fi

    # Verificar fuentes
    case "$SYSTEM" in
        "macOS")
            if ls "$FONT_DIR"/*Fira* &> /dev/null; then
                show_status "Fuentes de desarrollo instaladas"
            else
                show_warning "Fuentes de desarrollo no encontradas"
            fi
            ;;
        "WSL"|"Linux")
            if ls "$FONT_DIR"/*Fira* &> /dev/null 2>&1; then
                show_status "Fuentes de desarrollo instaladas"
            else
                show_warning "Fuentes de desarrollo no encontradas"
            fi
            ;;
    esac

    # Verificar herramientas npm
    if command -v live-server &> /dev/null; then
        show_status "Herramientas npm instaladas"
    else
        show_warning "Herramientas npm no encontradas"
    fi

    # Verificar configuraci√≥n Git
    if command -v git &> /dev/null; then
        git_name=$(git config --global user.name 2>/dev/null)
        git_email=$(git config --global user.email 2>/dev/null)
        if [[ -n "$git_name" && -n "$git_email" ]]; then
            show_status "Git configurado ($git_name)"
        else
            show_warning "Git no configurado"
        fi
    else
        show_warning "Git no instalado"
    fi

    # Verificar configuraci√≥n de terminal
    if command -v zsh &> /dev/null; then
        show_status "Zsh instalado"
        if [[ -d "$HOME/.oh-my-zsh" ]]; then
            show_status "Oh My Zsh instalado"
        else
            show_warning "Oh My Zsh no instalado"
        fi

        if [[ -f "$HOME/.p10k.zsh" ]]; then
            show_status "Powerlevel10k configurado"
        else
            show_warning "Powerlevel10k no configurado"
        fi
    else
        show_warning "Zsh no instalado"
    fi
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${CYAN}üìö AYUDA Y DOCUMENTACI√ìN:${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    echo -e "${YELLOW}üîß SOLUCI√ìN DE PROBLEMAS:${NC}"
    echo "‚Ä¢ Si VS Code no se encuentra, aseg√∫rate de que est√© en PATH"
    echo "‚Ä¢ En WSL, VS Code debe estar instalado en Windows"
    echo "‚Ä¢ Las fuentes requieren reinicio del terminal/VS Code"
    echo "‚Ä¢ Para macOS, Homebrew se instala autom√°ticamente"
    echo "‚Ä¢ La configuraci√≥n de terminal requiere reinicio del terminal"
    echo "‚Ä¢ Zsh se configurar√° como shell por defecto autom√°ticamente"
    echo ""
    echo -e "${YELLOW}üìÅ ARCHIVOS DE CONFIGURACI√ìN:${NC}"
    echo "‚Ä¢ VS Code: $VSCODE_SETTINGS_DIR/settings.json"
    echo "‚Ä¢ Fuentes: $FONT_DIR"
    echo "‚Ä¢ Terminal: ~/.zshrc, ~/.p10k.zsh, ~/.oh-my-zsh/"
    echo "‚Ä¢ Backups: $VSCODE_SETTINGS_DIR/settings.json.backup.*"
    echo ""
    echo -e "${YELLOW}üñ•Ô∏è CONFIGURACI√ìN DE TERMINAL:${NC}"
    echo "‚Ä¢ Instala Zsh como shell por defecto"
    echo "‚Ä¢ Configura Oh My Zsh con plugins esenciales"
    echo "‚Ä¢ Instala tema Powerlevel10k con configuraci√≥n personalizada"
    echo "‚Ä¢ Incluye fuentes Nerd Font para iconos"
    echo "‚Ä¢ Compatible con macOS, Linux y WSL"
    echo ""
    echo -e "${YELLOW}üåê RECURSOS ADICIONALES:${NC}"
    echo "‚Ä¢ Documentaci√≥n: https://github.com/tu-usuario/universal-dev-setup"
    echo "‚Ä¢ Issues: https://github.com/tu-usuario/universal-dev-setup/issues"
    echo "‚Ä¢ VS Code: https://code.visualstudio.com/"
    echo "‚Ä¢ Oh My Zsh: https://ohmyz.sh/"
    echo "‚Ä¢ Powerlevel10k: https://github.com/romkatv/powerlevel10k"
    echo ""
}

# Ejecutar script principal solo si se ejecuta directamente (no con source)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
