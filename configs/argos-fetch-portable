#!/bin/bash

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üê∫ ARGOS FETCH - Sistema de bienvenida visual para terminal
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# Script √©pico minimalista: Imagen del lobo + ARGOS ASCII
# Dise√±o limpio y elegante con rutas portables
#
# Dependencias: chafa (para renderizar im√°genes en terminal)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# Configuraci√≥n de rutas portables
ARGOS_IMAGE_PATH="$HOME/.local/share/argos/argos-image.png"
ARGOS_IMAGE_FALLBACK="$HOME/.config/argos/argos-image.png"

# Verificar dependencias y capacidades del terminal
check_image_support() {
    # Verificar si estamos en iTerm2
    if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
        return 0  # iTerm2 tiene soporte nativo
    fi

    # Para otros terminales, necesitamos chafa
    if ! command -v chafa &> /dev/null; then
        echo "‚ö†Ô∏è  ARGOS requiere 'chafa' para funcionar en este terminal"
        echo "   Instalar con: sudo apt install chafa  (Ubuntu/Debian)"
        echo "   Instalar con: brew install chafa      (macOS)"
        return 1
    fi

    return 0
}

# Funci√≥n para mostrar imagen seg√∫n el terminal
display_image() {
    local image_path="$1"
    local width="${2:-30}"
    local height="${3:-18}"

    if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
        # Usar protocolo nativo de iTerm2
        echo -e "\033]1337;File=inline=1:$(base64 < "$image_path")\a"
    else
        # Usar chafa para otros terminales
        chafa --symbols=block --size="${width}x${height}" "$image_path"
    fi
}

# Verificar que la imagen exista
ARGOS_IMAGE=""
if [[ -f "$ARGOS_IMAGE_PATH" ]]; then
    ARGOS_IMAGE="$ARGOS_IMAGE_PATH"
elif [[ -f "$ARGOS_IMAGE_FALLBACK" ]]; then
    ARGOS_IMAGE="$ARGOS_IMAGE_FALLBACK"
else
    echo "‚ö†Ô∏è  Imagen ARGOS no encontrada en:"
    echo "   $ARGOS_IMAGE_PATH"
    echo "   $ARGOS_IMAGE_FALLBACK"
    return 1
fi

# Verificar soporte de im√°genes
if ! check_image_support; then
    return 1
fi

# Limpiar pantalla completamente
clear
sleep 0.1
clear

# Crear arrays para la imagen y el texto ASCII
declare -a wolf_lines
declare -a argos_lines

# Capturar la imagen del lobo (m√©todo adaptativo)
if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
    # Para iTerm2, crear l√≠neas vac√≠as para el espacio de la imagen
    for ((i=1; i<=18; i++)); do
        wolf_lines+=("")
    done
    # Mostrar imagen nativa de iTerm2
    display_image "$ARGOS_IMAGE"
else
    # Para otros terminales, usar chafa
    mapfile -t wolf_lines < <(display_image "$ARGOS_IMAGE" 30 18)
fi

# ASCII art de ARGOS (m√°s compacto)
argos_lines=(
"    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
"   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù"
"   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
"   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë"
"   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë"
"   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
"                                               "
"        üê∫ W O L F   S Y S T E M üê∫        "
)

# Obtener informaci√≥n del sistema
USERNAME=$(whoami)
HOSTNAME=$(hostname)
OS=$(uname -s)
KERNEL=$(uname -r)
UPTIME=$(uptime -p 2>/dev/null || echo "N/A")

# Informaci√≥n adicional para mostrar
info_lines=(
"                                               "
"   üë§ Usuario: $USERNAME@$HOSTNAME"
"   üñ•Ô∏è  Sistema: $OS"
"   üîß Kernel: $KERNEL"
"   ‚è±Ô∏è  Uptime: $UPTIME"
"   üìÇ Directorio: $(pwd)"
)

# Combinar ASCII art con informaci√≥n del sistema
combined_lines=("${argos_lines[@]}" "${info_lines[@]}")

# Mostrar la imagen del lobo al lado del texto ARGOS (centrado verticalmente)
echo ""
echo ""

# Calcular l√≠neas para centrar el texto
wolf_lines_count=${#wolf_lines[@]}
combined_lines_count=${#combined_lines[@]}

# Calcular el offset para centrar ARGOS verticalmente
offset=$(( (wolf_lines_count - combined_lines_count) / 2 ))

# Mostrar las l√≠neas combinadas
for ((i=0; i<wolf_lines_count; i++)); do
    wolf_line="${wolf_lines[$i]:-}"

    # Calcular el √≠ndice del texto ARGOS considerando el offset
    combined_index=$(( i - offset ))

    if [ $combined_index -ge 0 ] && [ $combined_index -lt $combined_lines_count ]; then
        combined_line="${combined_lines[$combined_index]}"
    else
        combined_line=""
    fi

    # Mostrar l√≠nea combinada
    printf "%-35s  %s\n" "$wolf_line" "$combined_line"
done

echo ""
echo ""
